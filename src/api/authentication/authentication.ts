/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Login Service API
 * Ecosystem Hallucination Guys API Document
 * OpenAPI spec version: 1.0
 */
import type { Arguments } from 'swr'
import useSWRMutation from 'swr/mutation'
import type { SWRMutationConfiguration } from 'swr/mutation'
import type {
  CommonAppError,
  CommonSuccessRes,
  UsermodelLoginUserRequest,
  UsermodelLoginUserResponse,
  UsermodelUserCreate,
} from '../model'
import { requester } from '../mutator/requester'

/**
 * login user, returns user and set session
 * @summary Login new user
 */
export const postAuthLogin = (
  usermodelLoginUserRequest: UsermodelLoginUserRequest,
) => {
  return requester<UsermodelLoginUserResponse>({
    url: `/auth/login`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: usermodelLoginUserRequest,
  })
}

export const getPostAuthLoginMutationFetcher = () => {
  return (
    _: string,
    { arg }: { arg: Arguments },
  ): Promise<UsermodelLoginUserResponse> => {
    return postAuthLogin(arg as UsermodelLoginUserRequest)
  }
}
export const getPostAuthLoginMutationKey = () => `/auth/login` as const

export type PostAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogin>>
>
export type PostAuthLoginMutationError = CommonAppError

/**
 * @summary Login new user
 */
export const usePostAuthLogin = <TError = CommonAppError>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    string,
    Arguments,
    Awaited<ReturnType<typeof postAuthLogin>>
  > & { swrKey?: string }
}) => {
  const { swr: swrOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostAuthLoginMutationKey()
  const swrFn = getPostAuthLoginMutationFetcher()

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * Register new user
 * @summary Register new user
 */
export const postAuthRegister = (usermodelUserCreate: UsermodelUserCreate) => {
  return requester<CommonSuccessRes>({
    url: `/auth/register`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: usermodelUserCreate,
  })
}

export const getPostAuthRegisterMutationFetcher = () => {
  return (
    _: string,
    { arg }: { arg: Arguments },
  ): Promise<CommonSuccessRes> => {
    return postAuthRegister(arg as UsermodelUserCreate)
  }
}
export const getPostAuthRegisterMutationKey = () => `/auth/register` as const

export type PostAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRegister>>
>
export type PostAuthRegisterMutationError = CommonAppError

/**
 * @summary Register new user
 */
export const usePostAuthRegister = <TError = CommonAppError>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    string,
    Arguments,
    Awaited<ReturnType<typeof postAuthRegister>>
  > & { swrKey?: string }
}) => {
  const { swr: swrOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostAuthRegisterMutationKey()
  const swrFn = getPostAuthRegisterMutationFetcher()

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
